body{
    width: 200px; margin: 200px auto;
}
div{
    width: 200px;
}
div span{
    width: 200px; height: 200px;
    display: block;
    animation-duration: 3s;
    animation-iteration-count: infinite;
    animation-timing-function: ease;
    transform-style: preserve-3d;
}
/*  ! 3D를 적용시킬 때에는 꼭 transform-style: preserve-3d를 적어 주어야 함 */

div.rotater span:nth-child(1){background-color: red; animation-name: hori;}
@keyframes hori{
    from{
        transform: rotateX(0deg);
    }
    to{
        transform: rotateX(360deg);
    }
}

div.rotater span:nth-child(2){background-color: green; animation-name: verti;}
@keyframes verti{
    from{
        transform: rotateY(0deg);
    }
    to{
        transform: rotateY(360deg);
    }
}

div.rotater span:nth-child(3){background-color: blue; animation-name: depth;}
@keyframes depth{
    from{
        transform: rotateZ(0deg);
    }
    to{
        transform: rotateZ(360deg);
    }
}

div.rotater span:nth-child(4){background-color: yellow; animation-name: rotate3D}
@keyframes rotate3D{
    from{
        transform: rotate3d(0,0,0, 0deg);
    }
    to{
        transform: rotate3d(1,1,1, 360deg);
    }
}
/*  ? rotate3d(x,y,z,deg) - xyz는 당기는 힘을 적고 정수로 적어야 함
    ?   x,y,z축에 주는 힘에 차이를 둘 수는 있으나 세기를 조절할 수는 없음
    ?   -> ex) 1,1,1을 적으나 10,10,10을 적으나 결과는 같고
    ?           2,1,1로 주면 X축에 가하는 힘이 2배가 되어 X축에 더 힘을 실어 돌아감 */


div.translater span{
    background-color: salmon; animation-name: trans3D;
}
@keyframes trans3D{
    from{
        transform: rotate3d(0,0,0, 0deg) translate3d(0px,0px,0px);
    }
    to{
        transform: rotate3d(1,1,1, 360deg) translate3d(100px,300px,150px);
    }
}

div.scaler span{
    background-color: darkcyan; animation-name: scale3D;
}
@keyframes scale3D{
    from{
        transform: rotate3d(0,0,0, 0deg) translate3d(0px,0px,0px) scale3d(0,0,0);
    }
    to{
        transform: rotate3d(1,1,1, 360deg) translate3d(100px,300px,150px) scale3d(1,1,1.5);
    }
}